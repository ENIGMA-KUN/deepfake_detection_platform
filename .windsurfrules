# .windsurfrule

## Project Definition

This is a Deepfake Detection Platform that analyzes images, audio, and video for authenticity using deep learning models. The platform features a Tron Legacy-themed UI with media-specific tabs and detailed visualizations.

## Task Tracking Requirements

1. ALWAYS update `memory/task_tracker.json` IMMEDIATELY after completing any task
2. MARK tasks as "done" using the following format:
```json
{
  "tasks": [
    {
      "id": 1,
      "title": "Create Base Ensemble Framework",
      "status": "done",
      "completed_files": ["detectors/ensemble_detector.py"]
    }
  ]
}
```
3. UPDATE `memory/project_state.json` with details of ALL new files implemented:
```json
{
  "last_updated": "2025-04-17T15:30:00",
  "implemented_files": [
    {
      "path": "detectors/ensemble_detector.py",
      "classes": ["EnsembleDetector"],
      "functions": ["predict", "calibrate_weights", "adaptive_weighting"],
      "imports": ["numpy", "typing"],
      "dependents": ["detectors/image_detector/ensemble.py"]
    }
  ]
}
```
4. INCLUDE full implementation details in `memory/implementations/[filepath].md`
5. VERIFY all task dependencies before starting a new task
6. ONLY mark a task as "done" when ALL required files are fully implemented
7. MAINTAIN strict consistency between task_tracker.json and project_state.json
8. REFERENCE task ID when implementing related files

## Project Structure Rules

```
deepfake-detection/
├── README.md
├── requirements.txt
├── config.yaml
├── app/
│   ├── __init__.py
│   ├── main.py
│   ├── interface/
│   │   ├── __init__.py
│   │   ├── app.py
│   │   ├── components/
│   │   └── static/
│   ├── core/
│   │   ├── __init__.py
│   │   ├── processor.py
│   │   ├── queue_manager.py
│   │   ├── result_handler.py
│   │   └── singularity_manager.py
│   └── utils/
│       ├── __init__.py
│       ├── file_handler.py
│       ├── logging_utils.py
│       └── visualization.py
├── detectors/
│   ├── __init__.py
│   ├── base_detector.py
│   ├── ensemble_detector.py
│   ├── image_detector/
│   │   ├── __init__.py
│   │   ├── vit_detector.py
│   │   ├── beit_detector.py
│   │   ├── deit_detector.py
│   │   ├── swin_detector.py
│   │   ├── face_detector.py
│   │   └── ensemble.py
│   ├── audio_detector/
│   │   ├── __init__.py
│   │   ├── wav2vec_detector.py
│   │   ├── xlsr_detector.py
│   │   ├── mamba_detector.py
│   │   ├── tcn_detector.py
│   │   ├── spectrogram_analyzer.py
│   │   └── ensemble.py
│   └── video_detector/
│       ├── __init__.py
│       ├── genconvit.py
│       ├── timesformer.py
│       ├── slowfast.py
│       ├── video_swin.py
│       ├── x3d.py
│       ├── frame_analyzer.py
│       └── ensemble.py
├── models/
│   ├── __init__.py
│   ├── model_loader.py
│   ├── model_config.py
│   └── cache/
├── data/
│   ├── __init__.py
│   ├── preprocessing/
│   │   ├── __init__.py
│   │   ├── image_prep.py
│   │   ├── audio_prep.py
│   │   └── video_prep.py
│   └── augmentation/
│       ├── __init__.py
│       └── augmenters.py
├── reports/
│   ├── templates/
│   │   ├── detailed_report.html
│   │   └── summary_report.html
│   └── output/
├── tests/
│   ├── __init__.py
│   ├── test_image_detector.py
│   ├── test_audio_detector.py
│   ├── test_video_detector.py
│   └── test_data/
└── docs/
    ├── usage.md
    ├── detector_details.md
    └── model_descriptions.md
```

## State Tracking

1. Create and maintain a `memory/` directory for project state
2. Track all implemented files in `memory/project_state.json`
3. Update task progress in `memory/task_tracker.json`
4. Document all classes, functions, and variables in `memory/code_index.md`
5. Store full implementation details in `memory/implementations/[filepath].md`

## Anti-Hallucination Rules

1. NEVER reference a module, class, function, or variable that hasn't been explicitly implemented
2. ALWAYS verify file existence before importing from project modules
3. NEVER invent new directory structures or files not defined in the project structure
4. CHECK all imports against implemented files list before using
5. MAINTAIN strict adherence to naming conventions in task descriptions
6. DOCUMENT all assumptions when implementation details are ambiguous
7. VERIFY all dependencies before implementing dependent modules
8. DO NOT implement functionality beyond what is explicitly required

## Coding Standards

### Import Conventions
```python
# Standard library imports (alphabetically ordered)
import os
import sys
from typing import Dict, List, Optional

# Third-party imports (alphabetically ordered)
import numpy as np
import torch
from transformers import ViTModel

# Local imports (hierarchically ordered)
from detectors.base_detector import BaseDetector
from models.model_loader import load_model
```

### Docstring Format
```python
def function_name(param1: type, param2: type = default) -> return_type:
    """
    Brief description of function.
    
    Args:
        param1: Description of first parameter
        param2: Description of second parameter
        
    Returns:
        Description of return value
        
    Raises:
        ExceptionType: When/why this exception is raised
    """
```

### Error Handling
```python
try:
    # Operation that might fail
    result = operation()
except SpecificError as e:
    logging.error(f"Operation failed: {str(e)}")
    raise CustomError(f"Meaningful context: {str(e)}") from e
```

## Detector Implementation

### Base Detector (detectors/base_detector.py)
- Must be an abstract class with the following methods:
  - `__init__(self, model_name: str, confidence_threshold: float = 0.5)`
  - `detect(self, media_path: str) -> Dict[str, Any]` (abstract)
  - `normalize_confidence(self, raw_score: float) -> float`
  - `format_result(self, is_deepfake: bool, confidence: float, metadata: Dict) -> Dict[str, Any]`

### Ensemble Detector (detectors/ensemble_detector.py)
- Must implement the weighted ensemble approach
- Include adaptive weighting based on content characteristics
- Support calibration of weights based on validation data
- Provide base functionality for all media-specific ensemble detectors

### Image Detector (detectors/image_detector/)
- Implement detectors for all models: ViT, BEIT, DeiT, Swin Transformer
- Include face detection and tracking with bounding boxes
- Implement Visual Sentinel Singularity Mode
- Support heatmap visualization of manipulated regions

### Audio Detector (detectors/audio_detector/)
- Implement detectors for all models: Wav2Vec2, XLSR+SLS, XLSR-Mamba, TCN-Add
- Include spectrogram analysis and frequency band detection
- Implement Acoustic Guardian Singularity Mode
- Support anomaly region detection

### Video Detector (detectors/video_detector/)
- Implement detectors for all models: GenConViT, TimeSformer, SlowFast, Video Swin, X3D
- Perform frame-level, temporal, and audio-visual analysis
- Implement Temporal Oracle Singularity Mode
- Support timeline visualization and manipulation type detection

## Singularity Mode Implementation

### Core Components (app/core/singularity_manager.py)
- Implement SingularityManager class to manage all Singularity Modes
- Include base SingularityMode class and media-specific implementations
- Support adaptive weighting and enhanced visualization
- Provide unified interface for applying Singularity Modes to detection results

### Image: Visual Sentinel
- Dynamic weighted ensemble of all image models
- Content-adaptive weighting based on image characteristics
- Enhanced heatmap visualization with region-specific confidence
- 97.9% accuracy through combined analysis

### Audio: Acoustic Guardian
- Sophisticated weighted ensemble of all audio models
- Frequency band analysis and temporal pattern detection
- Enhanced spectrogram visualization with highlighted anomaly regions
- 96.2% accuracy through combined spectral analysis

### Video: Temporal Oracle
- Multi-modal fusion of video, image, and audio analysis
- Temporal consistency verification and manipulation type detection
- Enhanced timeline visualization with frame-by-frame confidence
- 97.3% accuracy through comprehensive multi-signal analysis

## UI Implementation

### Color Palette
```css
:root {
  --deep-black: #000000;
  --dark-teal-blue: #57A3B7;
  --neon-cyan: #00FFFF;
  --light-sky-blue: #BFD4FF;
  --powder-blue: #BBFEEF;
  --max-blue-green: #48B3B6;
  --electric-purple: #3B1AAA;
  --sunray: #DE945B;
  --magenta: #B20D58;
}
```

### UI Components
- Grid-based layout with glowing lines
- Neon outlines for interactive elements
- Dynamic gradient backgrounds
- Retro-futuristic typography (headers: Orbitron, Audiowide; body: Roboto, Open Sans)
- Tron-inspired visualization components
- Singularity Mode selection interface
- Enhanced visualization for each Singularity Mode

## Dependency Management

### Python Dependencies
```
# Exact versions required
torch==2.0.1
transformers==4.30.2
numpy==1.24.3
pandas==2.0.2
matplotlib==3.7.1
pillow==9.5.0
librosa==0.10.0.post2
opencv-python==4.7.0.72
scikit-learn==1.2.2
tensorflow==2.12.0
gradio==3.35.2
```

### Model Dependencies
- Vision Transformer: "google/vit-base-patch16-224"
- BEIT: "microsoft/beit-base-patch16-224-pt22k-ft22k"
- DeiT: "facebook/deit-base-distilled-patch16-224"
- Swin Transformer: "microsoft/swin-base-patch4-window7-224-in22k"
- Wav2Vec2: "facebook/wav2vec2-large-960h"
- XLSR+SLS: "facebook/wav2vec2-xlsr-53"
- XLSR-Mamba: "facebook/wav2vec2-xls-r-300m"
- TCN-Add: "facebook/wav2vec2-base-960h"
- GenConViT, TimeSformer, SlowFast, Video Swin, X3D: As specified in documentation

## Implementation Order

1. Initialize repository structure
2. Implement base detector class
3. Implement ensemble detector framework
4. Develop image detector modules and ensemble
5. Develop audio detector modules and ensemble
6. Develop video detector modules and ensemble
7. Implement Singularity Mode framework
8. Create core processing pipeline
9. Implement file handling and visualization utilities
10. Build UI components with Singularity Mode selection
11. Add model loader and configuration
12. Create media preprocessing modules
13. Implement report generation
14. Integrate all components
15. Create application entry point
16. Implement error handling and logging

## Testing Strategy

- Create unit tests for each implemented module
- Include sample media in tests/test_data/
- Verify integration between dependent components
- Test with valid and invalid inputs
- Check error handling with edge cases
- Evaluate Singularity Mode performance

## Module Name Consistency Rules

1. NEVER create modules with names that deviate from the project structure specification
2. MAINTAIN strict consistency in class, function, and variable names across all files
3. VERIFY that all import paths exactly match the actual file structure
4. ENSURE all referenced classes and functions exist in the specified modules before importing them
5. ALWAYS check that imported modules are properly implemented before writing code that depends on them
6. PROHIBIT duplicate implementations with different names
7. FOLLOW exact naming patterns from previous implementations for related components
8. STORE a registry of all module names, class names, and function signatures in memory for reference
9. VALIDATE import statements against this registry before adding new imports
10. ENFORCE consistent naming patterns for similar components (e.g., all detectors follow the same naming pattern)

## Import Path Validation

```python
# Before implementing any import:
def validate_import_path(import_path):
    """
    Verify that the import path exists and contains the expected components.
    
    Args:
        import_path: The module path to validate (e.g., 'detectors.base_detector')
        
    Returns:
        Boolean indicating if the import is valid
    """
    # Check if the module exists in the project_state registry
    if import_path not in implemented_modules:
        raise ImportError(f"Module {import_path} has not been implemented yet")
    
    # Verify the file path exists
    file_path = import_path.replace('.', '/') + '.py'
    if not os.path.exists(file_path):
        raise ImportError(f"File for module {import_path} does not exist at {file_path}")
    
    return True
```

## Class Name Registry

```json
{
  "module_registry": {
    "detectors.base_detector": {
      "classes": ["BaseDetector"],
      "functions": ["normalize_confidence", "format_result"],
      "imports": ["abc", "typing"]
    },
    "detectors.ensemble_detector": {
      "classes": ["EnsembleDetector"],
      "functions": ["predict", "calibrate_weights", "adaptive_weighting"],
      "imports": ["numpy", "typing"]
    },
    "detectors.image_detector.ensemble": {
      "classes": ["ImageEnsembleDetector"],
      "functions": ["predict", "_enhance_with_singularity", "_generate_enhanced_heatmap"],
      "imports": ["detectors.ensemble_detector.EnsembleDetector", "numpy"]
    }
  }
}
```

## Implementation Consistency Checks

1. Before implementing a new file, verify all imported modules exist and contain the expected classes/functions
2. After implementing a file, register all classes, functions, and variables in the module registry
3. Use consistent naming patterns across related components (e.g., all detector classes should end with "Detector")
4. Maintain identical method signatures for overridden methods in derived classes
5. Verify that method parameters match between interface declarations and implementations
6. Ensure all class inheritance hierarchies are consistent with the project design
7. Use the same parameter names for similar functions across different modules

## File Dependency Tracking

For each file implementation, track:
1. All modules this file depends on
2. All modules that depend on this file
3. Specific classes and functions used by dependent modules
4. Required import statements for dependencies

This ensures when updating any file, all dependent files can be verified for compatibility.

## Dash Framework Compatibility Rules

### 1. Dash Configuration Object Usage
```python
# INCORRECT - Passing config as a dictionary
app = dash.Dash(__name__, config=config_dict)

# CORRECT - Use the proper Dash configuration approach
app = dash.Dash(
    __name__,
    assets_folder=config['assets_folder'],
    title=config['app_title'],
    external_stylesheets=config['external_stylesheets']
)
```

### 2. Asset URL Generation
```python
# INCORRECT - Assuming assets_external_path attribute exists
html.Img(src=app.get_asset_url("logo.png"))

# CORRECT - Verify assets directory exists and use appropriate path
# Ensure the assets directory structure is:
# app/interface/assets/logo.png
html.Img(src='/assets/logo.png')  # Direct path reference
# OR
html.Img(src=app.get_asset_url("logo.png"))  # Only if properly configured
```

### 3. Running Dash Application
```python
# INCORRECT - Using deprecated method
app.run_server(debug=True, host='0.0.0.0', port=8050)

# CORRECT - Using current API
app.run(debug=True, host='0.0.0.0', port=8050)
```

## Implementation Verification Rules

### 1. Asset Directory Validation
- VERIFY app/interface/assets/ directory exists before referencing assets
- CREATE directory if missing: `os.makedirs(os.path.join('app', 'interface', 'assets'), exist_ok=True)`
- PLACE required static files (logo.png, css files) in the assets directory

### 2. Configuration Error Prevention
```python
# Add validation for configuration objects
def validate_config(config):
    """Validate the configuration dictionary."""
    required_keys = ['model_paths', 'upload_folder', 'results_folder']
    for key in required_keys:
        if key not in config:
            raise ValueError(f"Configuration missing required key: {key}")
    return config
```

### 3. Path Validation Utility
```python
# Add utility function to verify paths
def ensure_path_exists(path):
    """Create directory if it doesn't exist."""
    if not os.path.exists(path):
        os.makedirs(path, exist_ok=True)
        logging.info(f"Created directory: {path}")
    return path
```

## Error Tracing Rules

### 1. Enhanced Error Handling
- WRAP application initialization in try-except blocks
- LOG detailed error information including file paths and line numbers
- IMPLEMENT fallback behavior when non-critical components fail

### 2. Configuration Debug Helper
```python
# Add debug helper for configuration troubleshooting
def debug_config(config):
    """Log configuration details for debugging."""
    logging.debug("---- Configuration Debug ----")
    for key, value in config.items():
        logging.debug(f"{key}: {value}")
    logging.debug("-----------------------------")
```

### 3. Startup Verification Checklist
- VALIDATE all required directories exist
- CHECK model files are accessible
- VERIFY database connections (if applicable)
- TEST basic detector functionality with sample files
- CONFIRM UI components load correctly

## Dependency Management Rules

### 1. Version Pinning
- SPECIFY exact versions for all dependencies
- PIN Dash to a specific version: dash==3.0.3
- ENSURE all interdependent packages have compatible versions

### 2. Package Import Validation
```python
# Add import validation at startup
def validate_imports():
    """Validate critical imports are available."""
    required_packages = {
        'dash': 'UI Framework',
        'torch': 'Machine Learning',
        'transformers': 'Hugging Face Models',
        'numpy': 'Numerical Processing',
        'opencv-python': 'Image Processing'
    }
    
    missing = []
    for package, description in required_packages.items():
        try:
            importlib.import_module(package)
        except ImportError:
            missing.append(f"{package} ({description})")
    
    if missing:
        raise ImportError(f"Missing required packages: {', '.join(missing)}")
```

## Memory Templates
memory/task2_tracker.json
memory/fix.md
### project_state.json
```json
{
  "last_updated": "2025-04-17T15:30:00",
  "implemented_files": [
    {
      "path": "detectors/base_detector.py",
      "classes": ["BaseDetector"],
      "functions": ["normalize_confidence", "format_result"],
      "imports": ["abc", "typing"],
      "dependents": []
    },
    {
      "path": "detectors/ensemble_detector.py",
      "classes": ["EnsembleDetector"],
      "functions": ["predict", "calibrate_weights", "adaptive_weighting"],
      "imports": ["numpy", "typing"],
      "dependents": ["detectors/image_detector/ensemble.py"]
    }
  ]
}
```

### task_tracker.json
```json
{
  "tasks": [
    {
      "id": 1,
      "title": "Create Base Ensemble Framework",
      "status": "done",
      "completed_files": [
        "detectors/ensemble_detector.py"
      ]
    },
    {
      "id": 2,
      "title": "Implement Image Ensemble Detector",
      "status": "in_progress",
      "completed_files": []
    }
  ]
}
```

## Final Notes

1. IMMEDIATELY update memory files after implementing each module
2. ALWAYS mark tasks as "done" when all requirements are complete
3. VERIFY all dependencies before starting new tasks
4. FOLLOW the exact repository structure
5. VALIDATE all imports against implemented files
6. MAINTAIN consistent naming across the project
7. USE the Singularity Mode implementations provided
8. APPLY the Tron Legacy theme consistently across UI
9. UPDATE both task_tracker.json and project_state.json together
10. VERIFY task dependencies are satisfied before marking a task as done